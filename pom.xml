<project xmlns="http://maven.apache.org/POM/4.0.0"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<groupId>com.wbd</groupId>
	<artifactId>cloud-service</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<packaging>pom</packaging>
	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>2.0.4.RELEASE</version>
	</parent>

	<!-- jar version declare -->
	<properties>
		<spring-cloud.version>Finchley.RELEASE</spring-cloud.version>
		<mybatis.version>1.3.2</mybatis.version>
		<jwt.version>0.9.0</jwt.version>
		<fastjson.version>1.2.47</fastjson.version>
		<commons-collections>4.1</commons-collections>
		<monitor.version>2.0.2</monitor.version>
		<swagger.version>2.8.0</swagger.version>
		<aliyun-sdk-oss.version>2.8.2</aliyun-sdk-oss.version>
		<aliyun-sdk-core.version>3.2.8</aliyun-sdk-core.version>
		<aliyun-sdk-dysmsapi.version>1.1.0</aliyun-sdk-dysmsapi.version>
		<elasticsearch.version>6.2.3</elasticsearch.version>
		<security-oauth2.version>2.3.3.RELEASE</security-oauth2.version>
		<docker.image.prefix>springboot</docker.image.prefix>
	</properties>

	<!-- 依赖管理， 对jar的依赖管理， 子项目在引入jar时，可以不用声明对应版本也不需要额外声明下面jar的依赖， 子项目自动集成了下面的所有依赖， 在该父pom对依赖进行了统一管理了 -->
	<dependencies>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-actuator</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency>
		
		<dependency>
			<groupId>org.projectlombok</groupId>
			<artifactId>lombok</artifactId>
		</dependency>
		
		<dependency>
			<groupId>com.alibaba</groupId>
			<artifactId>fastjson</artifactId>
			<version>${fastjson.version}</version>
		</dependency>
		<dependency>
			<groupId>org.apache.commons</groupId>
			<artifactId>commons-lang3</artifactId>
		</dependency>
		<dependency>
			<groupId>org.apache.commons</groupId>
			<artifactId>commons-collections4</artifactId>
			<version>${commons-collections}</version>
		</dependency>
	</dependencies>

	<!-- 表示该父pom所依赖的jar版本管理，如果子项目集成该项目， 那么默认就会继承dependencyManagement 节点 所声明的对于jar版本管理，不是jar的依赖， 上面才是jar的依赖 
	
	dependencies即使在子项目中不写该依赖项，那么子项目仍然会从父项目中继承该依赖项（全部继承）

       dependencyManagement里只是声明jar版本管理，并不实现引入，因此子项目需要显示的声明需要用的依赖。如果不在子项目中声明依赖，是不会从父项目中继承下来的；只有在子项目中写了该依赖项，并且没有指定具体版本，才会从父项目中继承该项，并且version和scope都读取自父pom;另外如果子项目中指定了版本号，那么会使用子项目中指定的jar版本。
	
	所以一般 用dependencyManagement與dependencies嵌套一起使用
	-->
	<dependencyManagement>
		<dependencies>
			<dependency>  <!-- spring cloud对于所有的依赖，进行版本管理， 而不是jar管理， -->
				<groupId>org.springframework.cloud</groupId>
				<artifactId>spring-cloud-dependencies</artifactId>
				<version>${spring-cloud.version}</version>
				<type>pom</type>
				<scope>import</scope>
			</dependency>
			<dependency>
				<groupId>org.mybatis.spring.boot</groupId>
				<artifactId>mybatis-spring-boot-starter</artifactId>
				<version>${mybatis.version}</version>
			</dependency>
			<dependency>
				<groupId>io.jsonwebtoken</groupId>
				<artifactId>jjwt</artifactId>
				<version>${jwt.version}</version>
			</dependency>
		</dependencies>
	</dependencyManagement>

<!-- modules declare, include modules -->
	<modules>
		<module>register-center</module>
		<module>config-center</module>
		<module>user-center</module>
		<module>api-model</module>
		<module>commons</module>
		<module>oauth-center</module>
		<module>log-starter</module>
		<module>log-center</module>
	</modules>
</project>